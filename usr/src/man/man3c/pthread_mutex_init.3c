.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1991, 1992, 1994, The X/Open Company Ltd.
.\" Copyright (c) 2001, The IEEE and The Open Group.  All Rights Reserved.
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 2022 OmniOS Community Edition (OmniOSce) Association.
.\"
.Dd February 18, 2022
.Dt PTHREAD_MUTEX_INIT 3C
.Os
.Sh NAME
.Nm pthread_mutex_init ,
.Nm pthread_mutex_destroy
.Nd initialize or destroy a mutex
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fo pthread_mutex_init
.Fa "pthread_mutex_t *restrict mutex"
.Fa "const pthread_mutexattr_t *restrict attr"
.Fc
.Ft int
.Fo pthread_mutex_destroy
.Fa "pthread_mutex_t *mutex"
.Fc
.Vt pthread_mutex_t
.Va mutex
.No =
.Dv PTHREAD_MUTEX_INITIALIZER ;
.Vt pthread_mutex_t
.Va ecmutex
.No =
.Dv PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP ;
.Vt pthread_mutex_t
.Va rmutex
.No =
.Dv PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP ;
.Sh DESCRIPTION
The
.Fn pthread_mutex_init
function initializes the mutex referenced by
.Fa mutex
with attributes specified by
.Fa attr .
If
.Fa attr
is
.Dv NULL ,
the default mutex attributes are used; the effect is the same as
passing the address of a default mutex attributes object.
Upon successful
initialization, the state of the mutex becomes initialized and unlocked.
.Pp
Except for robust mutexes, attempting to initialize an already initialized
mutex results in undefined behavior.
.Pp
The
.Fn pthread_mutex_destroy
function destroys the mutex object referenced by
.Fa mutex ;
the mutex object becomes, in effect, uninitialized.
A destroyed mutex object can be re-initialized using
.Fn pthread_mutex_init ;
the results of otherwise referencing the object after it has been destroyed are
undefined.
.Pp
It is safe to destroy an initialized mutex that is unlocked.
Attempting to destroy a locked mutex results in undefined behavior.
.Pp
In cases where default mutex attributes are appropriate, the macro
.Dv PTHREAD_MUTEX_INITIALIZER
can be used to initialize mutexes that are statically allocated.
The effect is equivalent to dynamic initialization by a call to
.Fn pthread_mutex_init
with parameter
.Fa attr
specified as
.Dv NULL .
.Pp
In cases where error checking mutex attributes are appropriate, the macro
.Dv PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
can be used to initialize mutexes that are statically allocated.
The effect is equivalent to dynamic initialization by a call to
.Fn pthread_mutex_init
with parameter
.Fa attr
initialized with
.Xr pthread_mutexattr_init 3C
and its type set to
.Dv PTHREAD_MUTEX_ERRORCHECK .
.Pp
In cases where recursive mutex attributes are appropriate, the macro
.Dv PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
can be used to initialize mutexes that are statically allocated.
The effect is equivalent to dynamic initialization by a call to
.Fn pthread_mutex_init
with parameter
.Fa attr
initialized with
.Xr pthread_mutexattr_init 3C
and its type set to
.Dv PTHREAD_MUTEX_RECURSIVE .
.Sh RETURN VALUES
If successful, the
.Fn pthread_mutex_init
and
.Fn pthread_mutex_destroy
functions return
.Sy 0 .
Otherwise, an error number is returned to indicate the error.
.Sh ERRORS
The
.Fn pthread_mutex_init
function will fail if:
.Bl -tag -width Er
.It Er EAGAIN
The system lacked the necessary resources
.Pq other than memory
to initialize another mutex.
.It Er EBUSY
An attempt was detected to re-initialize a robust mutex previously initialized
but not yet destroyed.
See
.Xr pthread_mutexattr_setrobust 3C .
.It Ev EINVAL
An attempt was detected to re-initialize a robust mutex previously initialized
with a different set of attributes.
See
.Xr pthread_mutexattr_setrobust 3C .
.It Er ENOMEM
Insufficient memory exists to initialize the mutex.
.It Er EPERM
The caller does not have the privilege to perform the operation.
.El
.Pp
The
.Fn pthread_mutex_init
function may fail if:
.Bl -tag -width Er
.It Er EBUSY
An attempt was detected to re-initialize the object referenced by
.Fa mutex ,
a mutex previously initialized but not yet destroyed.
.It Er EINVAL
The value specified by
.Fa attr
or
.Fa mutex
is invalid.
.El
.Pp
The
.Fn pthread_mutex_destroy
function may fail if:
.Bl -tag -width Er
.It Er EBUSY
An attempt was detected to destroy the object referenced by
.Fa mutex
while it is locked or referenced
.Po
for example, while being used in a
.Xr pthread_cond_wait 3C
or
.Xr pthread_cond_timedwait 3C
.Pc
by another thread.
.It Er EINVAL
The value specified by
.Fa mutex
is invalid.
.El
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy MT-Safe
.Sh SEE ALSO
.Xr pthread_cond_timedwait 3C ,
.Xr pthread_cond_wait 3C ,
.Xr pthread_muteattr_init 3C ,
.Xr pthread_mutex_lock 3C ,
.Xr pthread_mutexattr_init 3C ,
.Xr pthread_mutexattr_setrobust 3C ,
.Xr pthread_mutexattr_settype 3C ,
.Xr attributes 7 ,
.Xr mutex 7
